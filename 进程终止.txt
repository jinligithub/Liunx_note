进程终止--把所有结构释放掉

1进程退出的场景有哪些？.
	* 代码运行完，结果正确。（代码运行完，需要看退出码）
	* 代码运行完，结果不正确。
	* 代码异常终止（崩溃）。（退出码就不重要了）

2.常见的进程退出方法？
	* 正常终止：1.从main()返回。2.调用exit()函数。3.调用_exit()函数
	* 异常终止（一般都是收到了信号）：1.Ctrl+C，信号终止。2.kill 。3.除0。4.指针异常

2.1拿个接口把错误码转化为提示符
	* 
perror()


3.exit和_exit的区别？
	* exit：它让进程会刷新自己的输出缓冲区

#include<unistd.h>
void exit(int status);
	* _exit：它不会刷新，进程直接退出。

#include<stdio.h>
void _exit(int status);
//status定义了进程的终止状态，父进程通过wait来获取该值。
注意：虽然status是int，但父进程只有低八位可以被父进程用，所以执行exit（-1）时，在终端执行发现返回值为255


4.如何先查看进程的退出码？
	* echo $
	*退出码：return 后边的值就是进程的退出码。
	* echo $ 是用来保存最近一个进程的退出


5.操作系统如何开辟和释放PCB？
	* 把无用的PCB用链表连接起来，下一个要用时把PCB给他，写上自己的代码和数据，同时这样也节省的开辟和释放的时间


6.进程终止时需要做什么？
把进程创建的资源一一释放掉，比如PCB，虚拟地址空间，页表，映射关系，但PCB不会立即释放掉，他会等待父进程回收他的推出信息之后才会把PCB 释放掉
7.return退出
	* return 是一种常见的退出方法。执行return n 相当于执行 exit（n）,因为调用main的运行时函数会减将main的返回值当作exit的参数。
	* return n 返回值n就是退出码。

任何时候调用exit都会终止进程（把资源释放掉）