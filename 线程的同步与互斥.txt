1.互斥量：mutex
1.临界资源和临界区的概念
	* 临界资源：多线程执行流共享的资源叫临界资源
	* 临界区：每个线程内部，访问临界资源的代码叫临界区

2.同步和互斥的概念
	* 

3.解释一下原子性
	* 

4.对整形变量的++/--操作是原子的吗？为什么？
	* 不是原子的，因为他要马旭冯诺依曼的体系结构，CPU进行计算时，先要从内存中读取数据，然后进行++，--操作，最后再把计算的结果写入内存中去。

5.要解决同时访问同一份数据导致计算结果出错，应该怎么做？
	* 代码必须要有互斥行为。当代马进入临界区执行时，不允许其他线程进入该临界区
	* 如果多个线程同时执行该临界区的代码，并且临界区没有线程在执行，那么只允许一个线程进入该临界区
	* 如果线程不在临界区中执行，那么该进程不能阻止其他线程进入该临界区

6.属于临界资源的有哪些
	* 信号量
	* 锁

7.互斥锁的加锁过程是原子的
8.访问临界区时时间片到了会不安全吗？
	* 当访问临界区时时间片到了，即使被切换出去也不怕。因为该线程会带着锁出去，其他线程要执行，只有等到该线程执行完，解锁后才能进入该临界区。

9.如何解释线程安全和 可重入？
	* 多个线程并发执行同一段代码，不会出现不同的结果，常对全局变量或静态变量操作，并且没有锁的保护情况下会出现问题

	* 同一个函数被不同的执行流调用，当前一个执行流还没执行完，就被其他程序再次进入，这为重入，一个函数在可重入的情况下运行不会出现任何问题，这为重入，则该函数为可重入函数，否现在为不可重入函数。
	* 如果将对临界资源访问加上锁，则这个函数是安全的，但是如果这个可重入函数的锁还未释放则会产生死锁，因此是不可重入的。


链表为不可重入函数
10.一个线程，一把锁也会产生死锁问题吗？
	* 会，因为该线程第一次申请到了锁，但第二次由于代码有误导致再次申请锁，由于锁被他自己拿着还未释放就会导致该线程被挂起，产生死锁问题

11.产生死锁的四个条件
	* 互斥条件：一个资源每次只能被一个执行流使用
	* 请求与保持条件：一个执行流因为请求资源而被阻塞，对已有资源保持不放
	* 不剥夺条件：一个执行流已经获得资源，在未使用完之前，不能强制剥夺
	* 循环等待条件：若干执行流调用已经形成一种头尾相连的循环等待资源关系

12.避免死锁的方法
	* 破坏四个必要条件
	* 加锁顺序一致
	* 避免锁未释放的场景
	* 资源一次性分配







