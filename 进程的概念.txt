3.进程
1.进程的概念？
	* 课本：正在执行的一个程序。
	* 内核：担当分配系统资源（CPU时间，内存）的实体。

2.怎么描述进程的PCB？
	* PCB（process  control  block）:在Linux下PCB是：task_struct
	* 进程里的信息放在进程控制块的数据结构中，也可以理解为进程属性集合。

3.task_struct 在Linux中的是做什么的？
	* 是Linux中描述进程的结构体
	* 是Linux内核的一种数据结构，它会包含着进程的信息 被加载到RAM(内存)里。

4.当进程中所有PCB的优先级一样时，它们如何组织？
	* 它们以队列的形式组织起来

5.task_struct的内容有哪些，他们的作用都是什么？
	* 标识符（pid）:它是描述进程的唯一标识符，用来区别其他进程
	* 状态：有任务状态，退出状态，退出信号等。
	* 优先级：相对于其他进程的优先级
	* 程序计数器：在CPU中有一个PC指针（一个CPU只有一个），它指向程序即将执行的下一条指令的地址。
	* 内存指针：包含程序代码和进程相关的指针，还有和其他进程共享的内存指针。
	* 上下文数据 :进程执行时处理器的寄存器中的数据（休学例子）
	* I/O状态信息：包含显示I/O请求，分配给进程I/O设备和被进程使用的文件列表
	* 记账信息：可能包含处理器处理时间的总和，使用的时钟数总和，时间限制，记账号等

6.调度队列是什么？
	* 把R状态的进程（PCB） 拿出来放在一个按优先级排放的队列里。操作系统在该队列里选择进程到CPU上执行。

7.pc指针的作用？
	* PC指针存在于CPU中的一个寄存器中，它指向当前正在执行指令的下一条指令的地址。在该操作完成后，PC指针指向下一个PC指针
	* 可以通过pc指针找到当前程序走到哪一步了
	* 完成操作后，pc指针指向下一个pc指针

8.优先级和优先权的区别？
	* 权限：决定了能不能做
	* 优先级：考虑优先顺序，优先级越高，越早被调用

9.在哪里可以看见组织进程？他们是以哪种形式存在的？
	* 可以在内核的源代码中找到，
	* 所有运行在系统里的进程都以task_struct的形式在内核里

10.如何查看进程？
	* ps aux  ：查看所有的进程
	* ps aux | grep 文件名：查看某一个进程
	* top ： windows下的任务管理器
	* ls /proc：文件内容是时时更新的（cwd  ：当前工作路径，exe：当前执行文件的路径）

11.如何结束进程？
	* Ctrl+c
	* kill -9

12.如何获取进程的标识符？
	* 父进程pid：通过getpid()获取父进程的id
	* 子进程ppid：通过getppid()获取子进程的id

13.子进程和父进程的pid和ppid是如何变化的？
	* pid一直不变，ppid一直在变
bash的pid为3991

13.1  .fork有几个返回值？fork调用成功和失败的时候分别返回什么？
	* fork有两个返回值
	* 成功的时候：第一个返回值：返回父进程的pid （因为父进程只有一个但子进程可以有多个，可以通过pid查找子进程，子进程只有一个父进程）。                                                 第二个返回值：子进程返回0       （子进程只有一个父进程）。
	* 失败的时候：返回-1                                         （fork调用失败，分配不出资源）


13.2 . 为什么fork有两个返回值？
	* 因为fork之前只有一个执行流，fork之后有两个执行流。而且，fork之后的的代码父子进程都会执行。所以return 会有两个值。

14.fork如何创建进程？
	* fork 创建子进程，父子进程代码共享，数据各自私有（写时拷贝）。所以父子进程创建之后，父子进程代码共享，数据是独立的。
	* fork创建的子进程的pid是以父进程的pid为模板的 ，子进程的资源从父进程中得到的。

15.为什么进程运行是有独立性的？
	* 有独立的PCB，进程对应的代码独立，数据不相同，以及父子进程也是独立的（因为代码是只读的，子进程和父进程都不会改变代码，但是数据是独立的，各自私有的）。

16.父子进程如何执行代码？
	* fork之前只有一个进程，之后有两个进程。父子进程都会执行fork之后的代码，因为父子进程共享代码。所以在return时有两个执行流，所以return有两个返回值。

17.死循环会不会让CPU卡住？
	* 不会。因为时间片到后会把该进程从CPU上剥离下来

18.时间片
	* 时间片（保存在当前进程的PCB里）：任何一个程序在CPU上运行超过一段时间就会被剥离下来。
	* 时间片是一个进程，占有CPU的资源的基本单位（HZ）

19.进程是如何进行进程间切换的？
	* 进程间切换---保存/恢复硬件上下文。
	* 先保留当前进程的上下文数据和PCB（保留学籍）在去执行其他程序。
	* CPU中有一套寄存器，寄存器里的数据叫进程的上下文数据。
	* 下次在执行前先恢复之前进程的PCB和寄存器中的数据。

20.并发和并行的概念？
	* 并发：在一个时间段内，多个任务同时推进。
	* 并行：多个任务在CPU上运行。

21.什么是前台进程？
	* 当前进程在运行，后边输入的命令都没有用。


